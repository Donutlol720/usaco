// Source: https://usaco.guide/general/io

#include <bits/stdc++.h>
using namespace std;

int main() {
	int N, M;
    cin >> N >> M;
    int grid[N][N]; //0 represents unlit AND unvisited
    for (int i = 0; i < N; i++){
       for (int j = 0; j < N; j++){
           grid[i][j] = 0;
        }
    }
    map<pair<int, int>, vector<pair<int, int>>> switches;
    for (int i=0;i<=M-1;i++){
        int x, y, a, b;
        cin >> x >> y >> a >> b;
        switches[{x-1, y-1}].push_back({a-1, b-1});
    }
    queue<pair<int, int>> frontier;
    frontier.push({0, 0});
    int total = 1;
    grid[0][0] = 2; //2 is illuminated AND visited, 1 is only illuminated
    while (!frontier.empty()){
        int x = frontier.front().first;
        int y = frontier.front().second;
        frontier.pop();
        //turn lights on, although this does not influence frontier
        for (auto const& element : switches[{x, y}]){
            int a = element.first;
            int b = element.second;
            if (grid[a][b] == 0){
                grid[a][b] = 1;
                total++;
                //see if can be added
                
                if (a+1 < N){
                    if (grid[a+1][b] == 2){
                        frontier.push({a, b});
                        grid[a][b] = 2;
                    }
                }
                if (a-1 > -1){
                    if (grid[a-1][b] == 2){
                        frontier.push({a, b});
                        grid[a][b] = 2;
                    }
                }
                if (b-1 > -1){
                    if (grid[a][b-1] == 2){
                        frontier.push({a, b});
                        grid[a][b] = 2;
                    }
                }
                if (b+1 < N){
                    if (grid[a][b+1] == 2){
                        frontier.push({a, b});
                        grid[a][b] = 2;
                    }
                }
            }
        }
        //x+1, ensure it is strictly illuminated
        if (x+1<N && grid[x+1][y] == 1){
            frontier.push({x+1, y});
            grid[x+1][y] = 2;
        }
        if (x-1>-1 && grid[x-1][y] == 1){
            frontier.push({x-1, y});
            grid[x-1][y] = 2;
        }
        if (y-1>-1 && grid[x][y-1] == 1){
            frontier.push({x, y-1});
            grid[x][y-1] = 2;
        }
        if (y+1 < N && grid[x][y+1] == 1){
            frontier.push({x, y+1});
            grid[x][y+1] = 2;
        }
    }
    cout << total;

}
