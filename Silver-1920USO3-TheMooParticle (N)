// Source: https://usaco.guide/general/io

#include <bits/stdc++.h>
using namespace std;
int main() {
    //main insight is groups of pairs form components in which any two pairs can interact
	int N;
    cin >> N;
    vector<pair<long long, long long>> components; //(x coord, y coord) 
    for (int i=0;i<=N-1;i++){
        long long x, y;
        cin >> x >> y;
        components.push_back({x, y});
    }
    //sort by x, then by y
    sort(components.begin(), components.end());
    
    //precompute prefix minimums of y
    vector<long long> minl(N);
    minl[0] = components[0].second;
    for (int i=1; i<N; i++){
        minl[i] = min(minl[i-1], components[i].second);
    }
    
    //precompute suffix maximums of y
    vector<long long> maxr(N);
    maxr[N-1] = components[N-1].second;
    for (int i=N-2; i>=0; i--){
        maxr[i] = max(maxr[i+1], components[i].second);
    }
    
    //count components: start with 1, add 1 for each boundary
    int ans = 1;
    for (int i=0; i<N-1; i++){
        //if min y on left > max y on right, they're in different components
        if (minl[i] > maxr[i+1]){
            ans++;
        }
    }
    
    cout << ans;
}
