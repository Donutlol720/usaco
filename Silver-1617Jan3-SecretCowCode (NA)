#include <bits/stdc++.h>
using namespace std;

int main() {
    string s;
    long long N;
    cin >> s >> N
    long long length = s.length();
    //find the smallest power of 2 leq to N
    long long nearest = length;
    while (nearest < N) {
        nearest *= 2;
    }
    //work backwards from N to find which character in original string
    long long pos = N;
    while (nearest > length) {
        long long half = nearest / 2;
        if (pos > half) {
            //position is in the second half (the rotated part)
            if (pos == half + 1) {
                //first character of second half = last character of first half
                pos = half;
            } else {
                //shift because rotation
                pos = pos - half - 1;
            }
        }
        //else position is in first half, stays as is
        
        nearest = half;
    }
    
    
    cout << s[pos - 1] << endl;
    
    return 0;
}
