// Source: https://usaco.guide/general/io

#include <bits/stdc++.h>
using namespace std;

int main() {
	int N,M;
    cin >> N >> M;
    vector<vector<int>> adj(N+1);
    map<pair<int, int>, bool> connected; //determines whether or not a pair of points is connected
    queue<int> existing_nodes;
    for (int i=0;i<=M-1;i++){
        int a,b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
        //form a connection between the smaller value and larger value
        connected[{min(a,b), max(a,b)}] = true;  
    }
    //fodder, so when it gets popped it doesnt actually remove a valid point, but rather handles the initial state instead
    existing_nodes.push(0);
    for (int i=0;i<=N-1;i++){
        int remove;
        cin >> remove;
        existing_nodes.push(remove);
    }
    for (int i=0;i<=N-1;i++){
        int node = existing_nodes.front();
        existing_nodes.pop();
        //iterate through neighbors of removed edge
        for (int j=0;j<static_cast<int>(adj[node].size());j++){
            connected[{min(node, adj[node][j]), max(node, adj[node][j])}] = false; //no longer connected
        }
        queue<int> frontier;
        frontier.push(existing_nodes.front());
        bool vis[N+1]={false};
        int region_size = 0;
        //since the top point is the point removed next, it must exist in the graph
        while (!frontier.empty()){
            int current = frontier.front();
            frontier.pop();
            vis[current] = true;
            region_size++;
            //iterate through neighbors, ensure a connection exists
            for (int j=0;j<static_cast<int>(adj[current].size());j++){
                if (connected[{min(current, adj[current][j]), max(current, adj[current][j])}] && vis[adj[current][j]]==false){
                    frontier.push(adj[current][j]);
                    vis[adj[current][j]] = true;
                }
            }
        }
        //i is the number of removed nodes, so if #of connected node = #total remaining nodes, it must be fully connected
        if (region_size == N-i){
            cout << "YES" << endl;
        }else{
            cout << "NO" << endl;
        }
    }
    
}
