// Source: https://usaco.guide/general/io

#include <bits/stdc++.h>
using namespace std;
//vector of boot depths
vector<pair<int, int>> boots;
//final answer initialization
int minimum = INT_MAX;
int N, B;
//array of each position and its depth
int f[251]; 
//tracks states - a combination of position and boot index
int vis[251][251]={0};

//dfs on all states
void compute(int pos, int boot){
    //must be an unvisited state before proceeding
    if (vis[pos][boot]==0){

        //now mark as visited
        vis[pos][boot]=-1;

        //check if reached the end, if so, update answer accordingly
        if (pos == N-1){
            vis[pos][boot]=boot;
            minimum = min(minimum, boot);
            // cout << "completed" << pos << boot << endl;
        }

        //you can either use same pair of boots
        for (int i=1;i<=boots[boot].second;i++){
            if (pos+i < N && f[pos+i]<=boots[boot].first){
                compute(pos+i, boot);
            }
        }
        //or discard boots until a pair is usable
        for (int i=boot+1;i<=B-1;i++){
            if (boots[i].first>=f[pos]){
                compute(pos, i);
            }
        }
    }
    
}

int main() {
    cin >> N >> B;
    for (int i=0;i<=N-1;i++){
        cin >> f[i];
    }
    for (int i=0;i<=B-1;i++){
        int x,y;
        cin >> x >> y;
        boots.push_back({x, y});
    }
    compute(0, 0);
    cout << minimum;
}
